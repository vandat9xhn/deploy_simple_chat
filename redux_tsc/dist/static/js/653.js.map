{"version":3,"sources":["webpack://redux_tsc/./src/_icons/eye_pass/IconEyePass.tsx","webpack://redux_tsc/./src/components/input/valid/_main/InputValid.tsx","webpack://redux_tsc/./src/components/input/common/pass/InputPass.tsx","webpack://redux_tsc/./src/components/input/valid/password/InputValidPass.tsx","webpack://redux_tsc/./src/components/input/valid/text/InputValidText.tsx","webpack://redux_tsc/./src/pages/learn/hook_form/LearnHookForm.tsx","webpack://redux_tsc/./src/pages/learn/_main/Learn.tsx"],"names":["IconEye","size_icon","close_eye","className","height","width","viewBox","stroke","fill","strokeLinecap","d","strokeWidth","cx","cy","r","x1","y1","x2","y2","InputValid","label","help","error","children","InputPass","input_props","React","type","setType","onClick","InputValidPass","InputValidText","initial_learn_input_arr","name","max_length","placeholder","schema","yup","shape","username","matches","password","LearnHookForm","props","useForm","resolver","yupResolver","register","errors","formState","handleSubmit","onSubmit","data","console","log","map","item","ix","key","message","value","Learn"],"mappings":"oIAUe,SAASA,EAAT,GAGG,QAFdC,iBAEc,MAFF,SAEE,EADdC,EACc,EADdA,UAGA,OACI,uBACIC,UAAU,UACVC,OAAQH,EACRI,MAAOJ,EACPK,QAAO,kBACPC,OAAO,qBACPC,KAAK,qBACLC,cAAc,SAGd,wBACIC,EAAE,6CACFF,KAAK,OACLG,YAAY,OAEhB,0BACIR,UAAWD,EAAY,eAAiB,GACxCU,GAAG,MACHC,GAAG,MACHC,EAAE,OAEN,qBAAGX,UAAWD,EAAY,GAAK,gBAC3B,wBACIQ,EAAE,4BACFF,KAAK,OACLG,YAAY,OAEhB,wBAAMI,GAAG,MAAMC,GAAG,MAAMC,GAAG,MAAMC,GAAG,MAAMP,YAAY,W,2DC5BvD,SAASQ,EAAT,GAKM,IAJjBC,EAIiB,EAJjBA,MACAC,EAGiB,EAHjBA,KACAC,EAEiB,EAFjBA,MACAC,EACiB,EADjBA,SAGA,OACI,2BACI,2BACI,yBAAOpB,UAAU,eAAeiB,IAGpC,2BACI,2BAAMG,IAGV,2BACI,uBAAKpB,UAAU,sCAAsCkB,IAGzD,2BACI,uBAAKlB,UAAU,kCAAkCmB,O,8XCzBlD,SAASE,EAAT,GAAqD,I,IAAhCC,EAAgC,EAAhCA,YAEhC,G,EAAwBC,WAAe,Y,EAAvC,E,8zBAAOC,EAAP,KAAaC,EAAb,KAQA,OACI,uBAAKzB,UAAU,aACX,2BACI,2BACIA,UAAU,mCACVwB,KAAMA,GACFF,KAIZ,uBAAKtB,UAAU,iBACX,uBACIA,UAAU,mCACV0B,QAlBhB,WACID,EAAgB,YAARD,EAAqB,OAAS,cAmB1B,gBAAC,IAAD,CAASzB,UAAmB,YAARyB,O,cC1BzB,SAASG,EAAT,GAKU,IAJrBV,EAIqB,EAJrBA,MACAC,EAGqB,EAHrBA,KACAC,EAEqB,EAFrBA,MACAG,EACqB,EADrBA,YAEA,OACI,gBAACN,EAAA,EAAD,CAAYC,MAAOA,EAAOC,KAAMA,EAAMC,MAAOA,GACzC,gBAACE,EAAD,CAAWC,YAAaA,O,oRCTrB,SAASM,EAAT,GAKU,IAJrBX,EAIqB,EAJrBA,MACAC,EAGqB,EAHrBA,KACAC,EAEqB,EAFrBA,MACAG,EACqB,EADrBA,YAEA,OACI,gBAAC,IAAD,CAAYL,MAAOA,EAAOC,KAAMA,EAAMC,MAAOA,GACzC,2BAAOnB,UAAU,oCAAuCsB,O,izBCQpE,IAAMO,EAAqD,CACvD,CACIZ,MAAO,WACPC,KAAM,oBACNY,KAAM,WACNC,WAAY,GACZC,YAAa,eAEjB,CACIR,KAAM,WACNP,MAAO,WACPC,KAAM,oBACNY,KAAM,WACNC,WAAY,GACZC,YAAa,gBAKfC,EAASC,OAAaC,MAAM,CAC9BC,SAAUF,OAAaG,QAAQ,sBAAuB,qBACtDC,SAAUJ,OAAaG,QAAQ,sBAAuB,uBAO3C,SAASE,EAAcC,GAElC,OAIIC,QAAqB,CACrBC,UAAUC,OAAYV,KAJtBW,EADJ,EACIA,SACaC,EAFjB,EAEIC,UAAaD,OACbE,EAHJ,EAGIA,aAWJ,OACI,2BACI,wBAAMC,SAAUD,GAPxB,SAAkBE,GACdC,QAAQC,IAAIF,OAOJ,uBAAKjD,UAAU,4BACV6B,EAAwBuB,KAAI,SAACC,EAAMC,GAAP,eACzB,uBAAKC,IAAG,UAAKD,GAAMtD,UAAU,4BACX,YAAbqD,EAAK7B,KACF,gBAACG,EAAA,EAAD,CACIV,MAAOoC,EAAKpC,MACZC,KAAMmC,EAAKnC,KACXC,MAAK,UAAE0B,EAAOQ,EAAKvB,aAAd,aAAE,EAAmB0B,QAC1BlC,YAAW,OACJsB,EAASS,EAAKvB,OADV,IAEPE,YAAaqB,EAAKrB,gBAI1B,gBAACJ,EAAA,EAAD,CACIX,MAAOoC,EAAKpC,MACZC,KAAMmC,EAAKnC,KACXC,MAAK,UAAE0B,EAAOQ,EAAKvB,aAAd,aAAE,EAAmB0B,QAC1BlC,YAAW,OACJsB,EAASS,EAAKvB,OADV,IAEPE,YAAaqB,EAAKrB,qBAQ1C,2BACI,yBAAOR,KAAK,SAASiC,MAAM,cC/FhC,SAASC,EAAMlB,GAC1B,OACI,2BACI,gBAACD,EAAD","file":"static/js/653.js","sourcesContent":["import * as React from 'react';\r\n\r\n// import './IconsEye.scss';\r\n\r\nexport interface IIconsEyePops {\r\n    size_icon?: string;\r\n    close_eye: boolean;\r\n}\r\n\r\n//\r\nexport default function IconEye({\r\n    size_icon = '1.5rem',\r\n    close_eye,\r\n}: IIconsEyePops) {\r\n    //\r\n    return (\r\n        <svg\r\n            className=\"IconEye\"\r\n            height={size_icon}\r\n            width={size_icon}\r\n            viewBox={`200 200 200 200`}\r\n            stroke=\"var(--black-brown)\"\r\n            fill=\"var(--black-brown)\"\r\n            strokeLinecap=\"round\"\r\n        >\r\n            {/* Eye for showing password x=200 y=200 Toggle:close_eye */}\r\n            <path\r\n                d=\"M200,300 Q300,200 400,300 Q300,400 200,300\"\r\n                fill=\"none\"\r\n                strokeWidth=\"10\"\r\n            />\r\n            <circle\r\n                className={close_eye ? 'display-none' : ''}\r\n                cx=\"300\"\r\n                cy=\"300\"\r\n                r=\"30\"\r\n            />\r\n            <g className={close_eye ? '' : 'display-none'}>\r\n                <path\r\n                    d=\"M200,300 Q300,350 400,300\"\r\n                    fill=\"none\"\r\n                    strokeWidth=\"20\"\r\n                />\r\n                <line x1=\"210\" y1=\"210\" x2=\"390\" y2=\"390\" strokeWidth=\"30\" />\r\n            </g>\r\n        </svg>\r\n    );\r\n}\r\n","import * as React from 'react';\r\n\r\n//\r\nexport interface IInputValidProps_C {\r\n    label: string;\r\n    help: string;\r\n    error: string;\r\n}\r\n\r\n//\r\ninterface IInputValidProps extends IInputValidProps_C {\r\n    children: React.ReactElement;\r\n}\r\n\r\n//\r\nexport default function InputValid({\r\n    label,\r\n    help,\r\n    error,\r\n    children,\r\n}: IInputValidProps) {\r\n    //\r\n    return (\r\n        <div>\r\n            <div>\r\n                <label className=\"label-field\">{label}</label>\r\n            </div>\r\n\r\n            <div>\r\n                <div>{children}</div>\r\n            </div>\r\n\r\n            <div>\r\n                <div className=\"text-warning font-12px font-italic\">{help}</div>\r\n            </div>\r\n\r\n            <div>\r\n                <div className=\"text-red font-12px font-italic\">{error}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import * as React from 'react';\r\n//\r\nimport IconEye from '../../../../_icons/eye_pass/IconEyePass';\r\n//\r\nimport './InputPass.scss';\r\n\r\n//\r\nexport interface IInputPassProps {\r\n    input_props: React.InputHTMLAttributes<HTMLInputElement>;\r\n}\r\n\r\n//\r\nexport default function InputPass({ input_props }: IInputPassProps) {\r\n    //\r\n    const [type, setType] = React.useState('password');\r\n\r\n    //\r\n    function toggleType() {\r\n        setType(type == 'password' ? 'text' : 'password');\r\n    }\r\n\r\n    //\r\n    return (\r\n        <div className=\"InputPass\">\r\n            <div>\r\n                <input\r\n                    className=\"input-valid w-100per padding-8px\"\r\n                    type={type}\r\n                    {...input_props}\r\n                />\r\n            </div>\r\n\r\n            <div className=\"InputPass_eye\">\r\n                <div\r\n                    className=\"InputPass_eye-contain hv-opacity\"\r\n                    onClick={toggleType}\r\n                >\r\n                    <IconEye close_eye={type == 'password'} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import * as React from 'react';\r\nimport InputPass from '../../common/pass/InputPass';\r\n//\r\nimport InputValid, { IInputValidProps_C } from '../_main/InputValid';\r\n\r\n//\r\ninterface IInputValidPassProps extends IInputValidProps_C {\r\n    input_props: React.InputHTMLAttributes<HTMLInputElement>;\r\n}\r\n\r\n//\r\nexport default function InputValidPass({\r\n    label,\r\n    help,\r\n    error,\r\n    input_props,\r\n}: IInputValidPassProps) {\r\n    return (\r\n        <InputValid label={label} help={help} error={error}>\r\n            <InputPass input_props={input_props} />\r\n        </InputValid>\r\n    );\r\n}\r\n","import * as React from 'react';\r\n//\r\nimport InputValid, { IInputValidProps_C } from '../_main/InputValid';\r\n\r\n//\r\ninterface IInputValidTextProps extends IInputValidProps_C {\r\n    input_props: React.InputHTMLAttributes<HTMLInputElement>;\r\n}\r\n\r\n//\r\nexport default function InputValidText({\r\n    label,\r\n    help,\r\n    error,\r\n    input_props,\r\n}: IInputValidTextProps) {\r\n    return (\r\n        <InputValid label={label} help={help} error={error}>\r\n            <input className=\"input-valid w-100per padding-8px\" {...input_props} />\r\n        </InputValid>\r\n    );\r\n}\r\n","import * as React from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport * as yup from 'yup';\r\n//\r\nimport InputValidText from '../../../components/input/valid/text/InputValidText';\r\nimport InputValidPass from '../../../components/input/valid/password/InputValidPass';\r\n//\r\nimport './LearnHookForm.scss';\r\n\r\n//\r\ntype IFormInputs = {\r\n    username: string;\r\n    password: string;\r\n};\r\n\r\ntype initial_learn_input_obj = {\r\n    type?: string;\r\n    label: string;\r\n    help: string;\r\n    name: 'username' | 'password';\r\n    max_length: number;\r\n    placeholder: string;\r\n};\r\n\r\n//\r\nconst initial_learn_input_arr: initial_learn_input_obj[] = [\r\n    {\r\n        label: 'Username',\r\n        help: 'Help for username',\r\n        name: 'username',\r\n        max_length: 15,\r\n        placeholder: 'username...',\r\n    },\r\n    {\r\n        type: 'password',\r\n        label: 'Password',\r\n        help: 'Help for password',\r\n        name: 'password',\r\n        max_length: 15,\r\n        placeholder: 'password...',\r\n    },\r\n];\r\n\r\n//\r\nconst schema = yup.object().shape({\r\n    username: yup.string().matches(/^[a-z0-9A-Z]{5,15}$/, 'This is not right'),\r\n    password: yup.string().matches(/^[a-z0-9A-Z]{5,15}$/, 'This is not right'),\r\n});\r\n\r\n//\r\nexport interface ILearnHookFormProps {}\r\n\r\n//\r\nexport default function LearnHookForm(props: ILearnHookFormProps) {\r\n    //\r\n    const {\r\n        register,\r\n        formState: { errors },\r\n        handleSubmit,\r\n    } = useForm<IFormInputs>({\r\n        resolver: yupResolver(schema),\r\n    });\r\n\r\n    //\r\n    function onSubmit(data: IFormInputs) {\r\n        console.log(data);\r\n    }\r\n\r\n    //\r\n    return (\r\n        <div>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <div className=\"LearnHookForm_input_list\">\r\n                    {initial_learn_input_arr.map((item, ix) => (\r\n                        <div key={`${ix}`} className=\"LearnHookForm_input_item\">\r\n                            {item.type == 'password' ? (\r\n                                <InputValidPass\r\n                                    label={item.label}\r\n                                    help={item.help}\r\n                                    error={errors[item.name]?.message}\r\n                                    input_props={{\r\n                                        ...register(item.name),\r\n                                        placeholder: item.placeholder,\r\n                                    }}\r\n                                />\r\n                            ) : (\r\n                                <InputValidText\r\n                                    label={item.label}\r\n                                    help={item.help}\r\n                                    error={errors[item.name]?.message}\r\n                                    input_props={{\r\n                                        ...register(item.name),\r\n                                        placeholder: item.placeholder,\r\n                                    }}\r\n                                />\r\n                            )}\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n\r\n                <div>\r\n                    <input type=\"submit\" value=\"Submit\" />\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n","import * as React from 'react';\r\nimport LearnHookForm from '../hook_form/LearnHookForm';\r\n\r\n//\r\nexport interface ILearnProps {}\r\n\r\n//\r\nexport default function Learn(props: ILearnProps) {\r\n    return (\r\n        <div>\r\n            <LearnHookForm />\r\n        </div>\r\n    );\r\n}\r\n"],"sourceRoot":""}