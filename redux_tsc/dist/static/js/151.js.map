{"version":3,"sources":["webpack://redux_tsc/./src/_images/naruto_x_hinata.jpg","webpack://redux_tsc/./src/_api/chat/ChatAPI.ts","webpack://redux_tsc/./src/pages/chat/mid/body/message/left/ChatBdMsLeft.tsx","webpack://redux_tsc/./src/pages/chat/mid/body/message/right/_main/ChatBdMsRight.tsx","webpack://redux_tsc/./src/pages/chat/mid/body/message/_main/ChatBdMessage.tsx","webpack://redux_tsc/./src/pages/chat/mid/body/_main/ChatMidBody.tsx","webpack://redux_tsc/./src/pages/chat/mid/foot/_main/ChatMidFoot.tsx","webpack://redux_tsc/./src/pages/chat/mid/_main/ChatMid.tsx","webpack://redux_tsc/./src/pages/chat/_main/Chat.tsx"],"names":["default_message_arr","Array","fill","id","first_name","last_name","picture","naruto_x_hinata","created_time","message","fakeMessageAPI","data","Promise","res","setTimeout","count","API_ChatMessage_L","params","is_fake_api","axiosClientNoToken","url","method","ChatBdMsLeft","className","src","alt","width","height","ChatBdMsRight","is_user","Intl","DateTimeFormat","hour","minute","day","month","year","format","Date","ChatBdMessage","useContext","context_api","user","ChatMidBody","message_arr","is_fetching","handleScrollToGetMessage","onScroll","map","item","ix","key","ChatMidFoot","handleSend","useState","value","setValue","ref_textarea_elm","useRef","ref","rows","placeholder","onChange","e","target","currentTarget","style","scrollHeight","trim","type","disabled","onClick","current","ChatMid","ws","has_fetched","message_state","setMessageState","ref_fetching","ref_max","ref_count","getData_API_Message","start_obj_state","c_count","size","length","document","getElementsByClassName","scrollIntoView","console","log","useEffect","onmessage","JSON","parse","_type","toString","handleHasMessage","scrollTop","clientHeight","send","stringify","Chat","props","WebSocket","location","host","onopen","onclose"],"mappings":"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","file":"static/js/151.js","sourcesContent":["export default __webpack_public_path__ + \"static/images_icons/d1d68e1d30f5690ce6624162050f15a4.jpg\";","import axiosClientNoToken from '../_axios_client/AxiosClientNoToken';\r\n//\r\nimport naruto_x_hinata from '../../_images/naruto_x_hinata.jpg';\r\nimport { is_fake_api } from '../_const/ConstAPI';\r\n\r\n//\r\ninterface _type_result_message_obj {\r\n    data: {\r\n        data: {\r\n            id: number;\r\n            first_name: string;\r\n            last_name: string;\r\n            picture: string;\r\n            message: string;\r\n            created_time: string;\r\n        }[];\r\n        count: number;\r\n    };\r\n}\r\n\r\n//\r\nconst default_message_arr = [\r\n    ...Array(10).fill({\r\n        id: 1,\r\n        first_name: 'My',\r\n        last_name: 'My',\r\n        picture: naruto_x_hinata,\r\n        created_time: '2021-07-10T06:18:00',\r\n        message:\r\n            'This is message\\nasd asd asd asd asd asda\\nasd asd asd asda dsa dasd\\nasd asd asda dsa asd ada das daasd asd asdasd asda das ad ad ad as asd asd adadsa ads ad ad adas das das ad adasd',\r\n    }),\r\n    ...Array(10).fill({\r\n        id: 2,\r\n        first_name: 'Nguyen',\r\n        last_name: 'Nguyen',\r\n        picture: naruto_x_hinata,\r\n        created_time: '2021-07-10T04:18:00',\r\n        message:\r\n            'ad asdsa dad ad\\nasd asd asd asd asd asda\\nasd asd asd asda dsa dasd\\nasd asd asda dsa asd ada das daasd asd asdasd asda das ad ad ad as asd asd adadsa ads ad ad adas das das ad adasd',\r\n    }),\r\n];\r\n\r\n//\r\nconst fakeMessageAPI = (data: any[]) =>\r\n    new Promise<_type_result_message_obj>((res) => {\r\n        setTimeout(() => {\r\n            res({ data: { data: data, count: 52 } });\r\n        }, 250);\r\n    });\r\n\r\n//\r\nexport function API_ChatMessage_L(params = {}) {\r\n    if (!is_fake_api) {\r\n        return axiosClientNoToken({\r\n            url: 'api/chat/message-l/',\r\n            method: 'GET',\r\n            params: params,\r\n        });\r\n    }\r\n\r\n    return fakeMessageAPI(default_message_arr);\r\n}\r\n\r\n//\r\nexport function API_ChatMessage_C(data = {}) {\r\n    return axiosClientNoToken({\r\n        url: 'api/chat/message-c/',\r\n        method: 'POST',\r\n        data: data,\r\n    });\r\n}\r\n","import * as React from 'react';\r\n// \r\nimport './ChatBdMsLeft.scss';\r\n\r\n//\r\nexport interface IChatBdMsLeftProps {\r\n    picture: string;\r\n}\r\n\r\n//\r\nexport function ChatBdMsLeft({ picture }: IChatBdMsLeftProps) {\r\n    //\r\n    return (\r\n        <div className=\"ChatBdMsLeft\">\r\n            <div>\r\n                <img\r\n                    className=\"brs-50\"\r\n                    src={picture}\r\n                    alt=\"\"\r\n                    width=\"50\"\r\n                    height=\"50\"\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import * as React from 'react';\r\n//\r\nimport './ChatBdMsRight.scss';\r\n\r\n//\r\nexport interface IChatBdMsRightProps_C {\r\n    first_name: string;\r\n    last_name: string;\r\n    message: string;\r\n    created_time: string;\r\n}\r\n\r\n//\r\ninterface IChatBdMsRightProps extends IChatBdMsRightProps_C {\r\n    is_user: boolean;\r\n}\r\n\r\n//\r\nexport function ChatBdMsRight({\r\n    is_user,\r\n    first_name,\r\n    last_name,\r\n    message,\r\n    created_time,\r\n}: IChatBdMsRightProps) {\r\n    //\r\n    return (\r\n        <div>\r\n            <div>\r\n                <div>\r\n                    <div\r\n                        className={`ChatBdMsRight_name label-field ${\r\n                            is_user ? 'text-align-end margin-left-auto' : ''\r\n                        }`}\r\n                    >\r\n                        {first_name} {last_name}\r\n                    </div>\r\n                </div>\r\n\r\n                <div\r\n                    className={`ChatBdMsRight_message ${\r\n                        is_user ? 'bg-blue' : 'bg-fb'\r\n                    }`}\r\n                >\r\n                    <div className=\"ChatBdMsRight_message-text\">{message}</div>\r\n                </div>\r\n\r\n                <div>\r\n                    <div\r\n                        className={`font-12px font-italic ${\r\n                            is_user ? '' : 'text-align-end'\r\n                        }`}\r\n                    >\r\n                        {created_time &&\r\n                            Intl.DateTimeFormat('vi-VN', {\r\n                                hour: '2-digit',\r\n                                minute: '2-digit',\r\n                                day: '2-digit',\r\n                                month: '2-digit',\r\n                                year: 'numeric',\r\n                            }).format(new Date(created_time))}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import * as React from 'react';\r\nimport { useContext } from 'react';\r\nimport { context_api } from '../../../../../../_context/ContextAPI';\r\n//\r\nimport { ChatBdMsLeft, IChatBdMsLeftProps } from '../left/ChatBdMsLeft';\r\nimport {\r\n    ChatBdMsRight,\r\n    IChatBdMsRightProps_C,\r\n} from '../right/_main/ChatBdMsRight';\r\n\r\n//\r\nexport interface IChatBdMessageProps\r\n    extends IChatBdMsRightProps_C,\r\n        IChatBdMsLeftProps {\r\n    id: number;\r\n}\r\n\r\n//\r\nexport function ChatBdMessage({\r\n    id,\r\n    first_name,\r\n    last_name,\r\n    picture,\r\n    message,\r\n    created_time,\r\n}: IChatBdMessageProps) {\r\n    //\r\n    const { user } = useContext(context_api);\r\n\r\n    const is_user = id == user.id;\r\n\r\n    //\r\n    return (\r\n        <div className=\"ChatBdMessage\">\r\n            <div className={`display-flex ${is_user ? 'row-reverse' : ''}`}>\r\n                <div\r\n                    className={`${\r\n                        is_user ? 'margin-left-5px' : 'margin-right-5px'\r\n                    }`}\r\n                >\r\n                    <ChatBdMsLeft picture={picture} />\r\n                </div>\r\n\r\n                <div>\r\n                    <ChatBdMsRight\r\n                        is_user={is_user}\r\n                        message={message}\r\n                        first_name={first_name}\r\n                        last_name={last_name}\r\n                        created_time={created_time}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import * as React from 'react';\r\n//\r\nimport {\r\n    ChatBdMessage,\r\n    IChatBdMessageProps,\r\n} from '../message/_main/ChatBdMessage';\r\n//\r\nimport './ChatMidBody.scss';\r\n\r\n//\r\nexport interface IChatMidBodyProps {\r\n    message_arr: IChatBdMessageProps[];\r\n    is_fetching: boolean;\r\n    handleScrollToGetMessage: (e: React.UIEvent<Element>) => void;\r\n}\r\n\r\n//\r\nexport default function ChatMidBody({\r\n    message_arr,\r\n    is_fetching,\r\n    handleScrollToGetMessage,\r\n}: IChatMidBodyProps) {\r\n    //\r\n    return (\r\n        <div className=\"ChatMidBody\">\r\n            <div\r\n                className=\"ChatMidBody_row display-flex col-reverse padding-8px\"\r\n                onScroll={handleScrollToGetMessage}\r\n            >\r\n                <div className=\"display-flex col-reverse\">\r\n                    {message_arr.map((item, ix) => (\r\n                        <div key={`${ix}`} className=\"ChatMidBody_item\">\r\n                            <ChatBdMessage {...item} />\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n\r\n                <div\r\n                    className={`text-align-center font-italic ${\r\n                        is_fetching ? '' : 'display-none'\r\n                    }`}\r\n                >\r\n                    Loading...\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import * as React from 'react';\r\nimport { useRef, useState } from 'react';\r\n//\r\nimport './ChatMidFoot.scss';\r\n\r\n//\r\nexport interface IChatMidFootProps {\r\n    handleSend: (value: string) => void;\r\n}\r\n\r\n//\r\nexport default function ChatMidFoot({ handleSend }: IChatMidFootProps) {\r\n    //\r\n    const [value, setValue] = useState('');\r\n\r\n    //\r\n    const ref_textarea_elm = useRef(null);\r\n\r\n    //\r\n    function handleChange(e: React.ChangeEvent<HTMLTextAreaElement>) {\r\n        setValue(e.target.value);\r\n\r\n        e.currentTarget.style.height = 'auto';\r\n        e.currentTarget.style.height = e.currentTarget.scrollHeight + 'px';\r\n    }\r\n\r\n    //\r\n    function onSend() {\r\n        if (value.trim()) {\r\n            handleSend(value);\r\n            setValue('');\r\n            ref_textarea_elm.current.style.height = 'auto';\r\n        }\r\n    }\r\n\r\n    //\r\n    return (\r\n        <div className=\"ChatMidFoot padding-8px\">\r\n            <div className=\"ChatMidFoot_row display-flex align-items-center\">\r\n                <div></div>\r\n\r\n                <div className=\"ChatMidBody_mid flex-grow-1\">\r\n                    <textarea\r\n                        ref={ref_textarea_elm}\r\n                        className=\"ChatMidFoot_textarea w-100per scroll-thin bg-fb\"\r\n                        rows={1}\r\n                        value={value}\r\n                        placeholder=\"Write something...\"\r\n                        onChange={handleChange}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"ChatMidFoot_right margin-left-5px\">\r\n                    <div>\r\n                        <button\r\n                            className={`btn btn-hv btn-active brs-5px label-field ${\r\n                                value.trim() ? '' : 'opacity-05'\r\n                            }`}\r\n                            type=\"button\"\r\n                            disabled={!value.trim()}\r\n                            onClick={onSend}\r\n                        >\r\n                            Send\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import * as React from 'react';\r\nimport { useEffect, useState, useRef } from 'react';\r\n//\r\nimport { API_ChatMessage_L } from '../../../../_api/chat/ChatAPI';\r\n//\r\nimport ChatMidBody from '../body/_main/ChatMidBody';\r\nimport ChatMidFoot from '../foot/_main/ChatMidFoot';\r\n//\r\nimport './ChatMid.scss';\r\n\r\n//\r\nexport interface IChatMidProps {\r\n    ws: { current: null | WebSocket };\r\n}\r\n\r\n//\r\nexport default function ChatMid({ ws }: IChatMidProps) {\r\n    //\r\n    const [message_state, setMessageState] = useState({\r\n        message_arr: [\r\n            {\r\n                id: 0,\r\n                first_name: '',\r\n                last_name: '',\r\n                picture: '',\r\n                message: '',\r\n                created_time: '',\r\n            },\r\n        ],\r\n        count: 0,\r\n        has_fetched: false,\r\n        is_fetching: false,\r\n    });\r\n\r\n    const { message_arr, has_fetched, is_fetching } = message_state;\r\n\r\n    //\r\n    const ref_fetching = useRef(false);\r\n    const ref_max = useRef(false);\r\n    const ref_count = useRef(0);\r\n\r\n    //\r\n    useEffect(() => {\r\n        getData_API_Message({ message_arr: [], has_fetched: false });\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (ws.current) {\r\n            ws.current.onmessage = (e) => {\r\n                console.log(e.data);\r\n                const { _type } = JSON.parse(e.data);\r\n                if (_type == 'message') {\r\n                    console.log('ok');\r\n                    handleHasMessage(e);\r\n                }\r\n            };\r\n        }\r\n    }, [ws.current]);\r\n\r\n    //\r\n    function handleHasMessage(e: MessageEvent) {\r\n        const { id, first_name, last_name, picture, message } = JSON.parse(\r\n            e.data\r\n        );\r\n\r\n        setMessageState((message_state) => ({\r\n            ...message_state,\r\n            message_arr: [\r\n                {\r\n                    id: id,\r\n                    first_name: first_name,\r\n                    last_name: last_name,\r\n                    picture: picture,\r\n                    message: message,\r\n                    created_time: new Date().toString(),\r\n                },\r\n                ...message_state.message_arr,\r\n            ],\r\n            count: message_state.count + 1,\r\n        }));\r\n\r\n        ref_count.current += 1;\r\n    }\r\n\r\n    /* --------------- */\r\n\r\n    //\r\n    async function getData_API_Message(start_obj_state = {}) {\r\n        try {\r\n            ref_fetching.current = true;\r\n\r\n            setMessageState({\r\n                ...message_state,\r\n                is_fetching: true,\r\n                ...start_obj_state,\r\n            });\r\n\r\n            const res = await API_ChatMessage_L({\r\n                c_count: ref_count.current,\r\n                size: 20,\r\n            });\r\n\r\n            setMessageState((message_state) => {\r\n                ref_count.current = has_fetched\r\n                    ? message_arr.length + res.data.data.length\r\n                    : res.data.data.length;\r\n\r\n                ref_max.current = ref_count.current >= res.data.count;\r\n\r\n                return {\r\n                    message_arr: has_fetched\r\n                        ? [...message_arr, ...res.data.data]\r\n                        : res.data.data,\r\n                    count: ref_count.current,\r\n                    has_fetched: true,\r\n                    is_fetching: false,\r\n                };\r\n            });\r\n\r\n            if (has_fetched) {\r\n                document\r\n                    .getElementsByClassName('ChatMidBody_item')[message_arr.length]\r\n                    .scrollIntoView(false);\r\n            }\r\n\r\n            setTimeout(() => {\r\n                ref_fetching.current = false;\r\n            }, 100)\r\n        } catch (er) {\r\n            console.log(er);\r\n        }\r\n    }\r\n\r\n    //\r\n    function handleScrollToGetMessage(e: React.UIEvent<Element>) {\r\n        if (\r\n            !ref_fetching.current &&\r\n            !ref_max.current &&\r\n            e.currentTarget.scrollTop <=\r\n                e.currentTarget.clientHeight - e.currentTarget.scrollHeight\r\n        ) {\r\n            getData_API_Message();\r\n        }\r\n    }\r\n\r\n    //\r\n    function handleSend(message: string) {\r\n        ws.current.send(\r\n            JSON.stringify({\r\n                _type: 'message',\r\n                message: message,\r\n            })\r\n        );\r\n    }\r\n\r\n    //\r\n    return (\r\n        <div className=\"ChatMid bg-primary\">\r\n            <div>\r\n                <ChatMidBody\r\n                    message_arr={message_arr}\r\n                    is_fetching={is_fetching}\r\n                    handleScrollToGetMessage={handleScrollToGetMessage}\r\n                />\r\n            </div>\r\n\r\n            <div>\r\n                <ChatMidFoot handleSend={handleSend} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import * as React from 'react';\r\nimport { useState, useEffect, useRef } from 'react';\r\n// import ChatLeft from '../left/_main/ChatLeft';\r\n//\r\nimport ChatMid from '../mid/_main/ChatMid';\r\n//\r\nimport './Chat.scss';\r\n\r\n//\r\nexport interface IChatProps {}\r\n\r\n//\r\nexport default function Chat(props: IChatProps) {\r\n    //\r\n    // const [open_left, setOpenLeft] = useState(false);\r\n\r\n    //\r\n    const ws = useRef(null);\r\n\r\n    //\r\n    useEffect(() => {\r\n        ws.current = new WebSocket('ws://' + location.host + '/ws/chat/world/');\r\n\r\n        ws.current.onopen = () => {\r\n            console.log('open');\r\n        };\r\n\r\n        // ws.current.onmessage = (e: MessageEvent<any>) => {\r\n        //     console.log(e);\r\n        // };\r\n\r\n        ws.current.onclose = () => {\r\n            console.log('close');\r\n        };\r\n    });\r\n\r\n    //\r\n    return (\r\n        <div className=\"Chat position-rel\">\r\n            <div className=\"display-flex justify-content-center\">\r\n                {/* <div\r\n                    className={`Chat_left ${\r\n                        open_left ? 'Chat_left-open' : 'Chat_left-close'\r\n                    }`}\r\n                >\r\n                    <ChatLeft />\r\n\r\n                    <div\r\n                        className=\"Chat_left-btn-open padding-8px\"\r\n                        onClick={handleOpenLeft}\r\n                    >\r\n                        x\r\n                    </div>\r\n                </div> */}\r\n\r\n                <div className=\"Chat_left\"></div>\r\n\r\n                <div className=\"Chat_mid\">\r\n                    <ChatMid ws={ws} />\r\n                </div>\r\n\r\n                <div className=\"Chat_right\"></div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n"],"sourceRoot":""}